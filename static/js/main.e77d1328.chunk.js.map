{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["key","frequency","loadState","serializedState","sessionStorage","getItem","JSON","parse","err","App","props","state","amount","date","rate","compounds","repayment","repaydate","repayfreq","enddate","display","summary","schedule","undefined","handleChange","bind","this","setState","event","target","name","id","value","generate","r","shouldGenerateSchedule","end","moment","push","start","add","isSameOrBefore","current","isRepaymentDate","repaymentDates","find","d","isSame","repaydates","map","i","format","Object","values","every","a","ldate","rdate","edate","isBefore","isAfter","balance","brate","Big","div","times","stringify","setItem","console","log","saveState","bamount","daily","dailyInterest","accrued","paccrued","tsched","samount","toFixed","interest","m","minus","isCompoundingDate","plus","compounding","Table","responsive","hover","size","k","prefix","title","className","Container","Row","Col","Form","Group","controlId","Label","Control","type","min","onChange","Text","placeholder","InputGroup","step","Append","as","Check","inline","label","displayRepaymentDates","length","Card","Body","renderDailySchedule","renderMonthlySchedule","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e77d1328.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Card from 'react-bootstrap/Card';\nimport Big from 'big.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst key = 'loan-state';\n\n// Big.DP = 8;\n\nconst frequency = {\n  'Weekly': 7,\n  'Fortnightly': 14 \n}\n\nconst loadState = () => {\n    try {\n        const serializedState = sessionStorage.getItem(key);\n        if (serializedState == null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n\nconst saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        sessionStorage.setItem(key, serializedState);\n    }\n    catch (err){\n        console.log(\"error saving state to sessionStorage\", key, state);\n    }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      amount: '',\n      date: '',\n      rate: '',\n      compounds: '',\n      repayment: '',\n      repaydate: '',\n      repayfreq: '',\n      enddate: '',\n      display: 'daily',\n      summary: {},\n      schedule: undefined\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const persistedState = loadState();\n  \n    if (persistedState !== undefined) {\n      this.setState(loadState());\n    }\n    // else {\n    //   this.setState({\n    //     amount: 100000,\n    //     date: '2019-10-01',\n    //     rate: 3.79,\n    //     repayment: 500,\n    //     repaydate: '2019-10-03',\n    //     repayfreq: 'Weekly',\n    //     summary: {},\n    //     enddate: ''\n    //   });\n    // }\n  }\n\n  handleChange(event) {\n    const {name, id, value} = event.target;\n    name ? this.setState({[name] : value}, this.generate) : this.setState({[id] : value}, this.generate);\n  }\n\n  repaymentDates() {\n    let r = [];\n\n    if (! this.shouldGenerateSchedule()) {\n      return r;\n    }\n\n    let end = moment(this.state.enddate);\n    r.push(moment(this.state.repaydate));\n\n    let start = moment(this.state.repaydate);\n\n    // console.log('repayfreq', this.state.repayfreq);\n    if (this.state.repayfreq === 'Monthly') {\n      start.add(1, 'months');\n\n      while (start.isSameOrBefore(end)) {\n        r.push(moment(start));\n        start.add(1, 'months');\n      }\n    }\n    else {\n      start.add(frequency[this.state.repayfreq], 'days');\n\n      while (start.isSameOrBefore(end)) {\n        r.push(moment(start));\n        start.add(frequency[this.state.repayfreq], 'days');\n      }\n    }\n\n    return r;\n  }\n\n  isCompoundingDate(current) {\n    if (this.state.compounds === 'month') {\n      return current.date() === 1;\n    }\n    return this.isRepaymentDate(current);\n  }\n\n  isRepaymentDate(current) {\n    const repaymentdates = this.repaymentDates();\n    const f = repaymentdates.find((d) => current.isSame(d, 'day')) \n    return f !== undefined;\n  }\n\n  displayRepaymentDates() {\n    const repaydates = this.repaymentDates();\n    return (\n      <>\n        <p>Repayment Dates</p>\n        <ul>\n          {repaydates.map((d, i) => <li key={i}>{d.format('YYYY-MM-DD')}</li>)}\n        </ul>\n      </>\n    )\n  }\n\n  /* Every form field should be filled.\n   * repaydate can't be before loan date.\n   */\n  shouldGenerateSchedule() {\n    if (Object.values(this.state).every((a) => a !== '')) {\n      let ldate = moment(this.state.date);\n      let rdate = moment(this.state.repaydate);\n      let edate = moment(this.state.enddate);\n      // Prevent schedules for crazy length periods\n      if (ldate.isBefore(moment('2019-01-01'))) {\n        // console.log('before 1/1/2019');\n        return false;\n      }\n      // Limit loan period to 5 years\n      if (edate.isAfter(moment(ldate).add(5, 'years'))) {\n        // console.log('more than 5 years');\n        return false;\n      }\n      if (rdate.isBefore(ldate) || edate.isBefore(ldate)) {\n        // console.log('enddate date before start date');\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  dailyInterest(balance) {\n      let brate = Big(this.state.rate);\n      brate = brate.div(100);\n      let annual = balance.times(brate);\n      return annual.div(365);\n  }\n\n\n  generate() {\n    saveState(this.state);\n    if (! this.shouldGenerateSchedule()) {\n      this.setState({schedule: undefined});\n      return;\n    }\n\n    let bamount = Big(this.state.amount);\n    let daily = this.dailyInterest(bamount);\n    let enddate = moment(this.state.enddate);\n\n    let accrued = Big(0);\n    let paccrued = Big(0);\n\n    /* Generate data for the schedule.\n    */\n    let tsched = [];\n    let summary = {samount: bamount.toFixed(2),\n                   interest: Big(0),\n                   repayment: Big(0)\n                  };\n    for (var m = moment(this.state.date); m.isSameOrBefore(enddate); m.add(1, 'days')) {\n      if (this.isRepaymentDate( m )) {\n        bamount = bamount.minus(this.state.repayment);\n        daily = this.dailyInterest(bamount);\n        summary.repayment = summary.repayment.add(this.state.repayment);\n      } \n      if (this.isCompoundingDate( m )) {\n        bamount = bamount.plus(accrued);\n        paccrued = accrued;\n        accrued = Big(0);\n        daily = this.dailyInterest(bamount);\n      } \n      accrued = accrued.add(daily);\n      summary.interest = summary.interest.add(daily);\n\n      if ((this.state.display === 'monthly' &&\n          this.isCompoundingDate( m )) ||\n          this.state.display === 'daily') {\n        tsched.push({date: m.format('YYYY-MM-DD'),\n                      balance: bamount.toFixed(2),\n                      accrued: accrued.toFixed(2),\n                      paccrued: paccrued.toFixed(2),\n                      daily: daily.toFixed(2),\n                      repayment: this.isRepaymentDate(m),\n                      compounding: this.isCompoundingDate(m) }\n                      );\n      }\n    }\n    /* Apply the accrued interest to get the final balance.\n    */\n    bamount = bamount.plus(accrued);\n    tsched.push({date: 'Final Balance',\n                  balance: bamount.toFixed(2),\n                  accrued: '',\n                  daily: ''}\n                  );\n\n    summary.interest = summary.interest.toFixed(2);\n    summary.repayment = summary.repayment.toFixed(2);\n    this.setState({schedule: tsched, summary});\n  }\n\n  renderDailySchedule() {\n    return (\n      <Table responsive hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Daily Interest</th>\n            <th>Accrued Interest</th>\n            <th>Loan Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n        { this.state.schedule.map((k, i) => {\n            let prefix = k.repayment ? 'table-success' : '';\n            prefix = k.compounding ? 'table-danger' : prefix;\n            let title = k.repayment ? 'Repayment today' : '';\n            title = k.compounding ? 'Interest compounds today' : title;\n            return (\n              <tr className={prefix} key={i} title={title}>\n                <td>{k.date}</td>\n                <td className='text-right'>{k.daily}</td>\n                <td className='text-right'>{k.accrued}</td>\n                <td className='text-right'>{k.balance}</td>\n              </tr>\n            )\n          })\n        }\n        </tbody>\n      </Table>\n    ) \n  }\n\n  renderMonthlySchedule() {\n    return (\n      <Table responsive hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th className='text-right'>Interest (previous period)</th>\n            <th className='text-right'>Loan Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n        { this.state.schedule.map((k, i) => {\n            return (\n              <tr key={i}>\n                <td>{k.date}</td>\n                <td className='text-right'>{k.paccrued}</td>\n                <td className='text-right'>{k.balance}</td>\n              </tr>\n            )\n          })\n        }\n        </tbody>\n      </Table>\n    ) \n  }\n\n  render() {\n    return (\n      <Container>\n        <h1>Generate a Loan Amortisation Schedule</h1>\n        <br/>\n        <Row>\n          <Col>\n            <p>Fill out all fields in the form below and the amortisation schedule will automatically generate.</p>\n            <Form>\n              <Row>\n                <Col>\n                  <Form.Group controlId=\"amount\">\n                    <Form.Label>Loan Amount</Form.Label>\n                    <Form.Control \n                      type='number'\n                      min='0'\n                      value={this.state.amount}\n                      onChange={this.handleChange}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      This should be the starting loan amount, or an amount taken from a statement on a date which interest was charged (ie no accrued interest).\n                    </Form.Text>\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group controlId=\"date\">\n                    <Form.Label>as at</Form.Label>\n                    <Form.Control \n                      type=\"date\" \n                      placeholder=\"Enter the date that your loan was this amount.\"\n                      value={this.state.date}\n                      onChange={this.handleChange}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      Earliest permitted date is 1/1/2019.\n                    </Form.Text>\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Form.Group controlId=\"rate\">\n                    <Form.Label>Interest Rate</Form.Label>\n                    <InputGroup className=\"mb-3\">\n                      <Form.Control \n                        placeholder=\"Enter interest rate\" \n                        type=\"number\" \n                        step=\"0.01\"\n                        value={this.state.rate}\n                        onChange={this.handleChange}\n                      />\n                      <InputGroup.Append>\n                        <InputGroup.Text>%</InputGroup.Text>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group controlId=\"compounds\">\n                    <Form.Label>Interest Compounds</Form.Label>\n                    <Form.Control \n                      as=\"select\" \n                      placeholder=\"When does interest compound?\" \n                      value={this.state.compounds}\n                      onChange={this.handleChange}\n                    >\n                      <option></option>\n                      <option value='month'>1st of the Month</option>\n                      <option value='repayment'>Same day as repayments</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Form.Group controlId=\"repayment\">\n                    <Form.Label>Repayment Amount</Form.Label>\n                    <Form.Control \n                      placeholder=\"Enter repayment amount\" \n                      value={this.state.repayment}\n                      onChange={this.handleChange}\n                    />\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group controlId=\"repayfreq\">\n                    <Form.Label>Repayment Frequency</Form.Label>\n                    <Form.Control \n                      as=\"select\" \n                      placeholder=\"Select repayment frequency\" \n                      value={this.state.repayfreq}\n                      onChange={this.handleChange}\n                    >\n                      <option></option>\n                      <option>Weekly</option>\n                      <option>Fortnightly</option>\n                      <option>Monthly</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Form.Group controlId=\"repaydate\">\n                    <Form.Label>Next Repayment Date</Form.Label>\n                    <Form.Control \n                      type=\"date\" \n                      placeholder=\"Enter next repayment date\" \n                      value={this.state.repaydate}\n                      onChange={this.handleChange}\n                    />\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group controlId=\"enddate\">\n                    <Form.Label>Loan Refinance Date</Form.Label>\n                    <Form.Control \n                      type=\"date\" \n                      placeholder=\"Enter the date fixed loan is to be refinanced\" \n                      value={this.state.enddate}\n                      onChange={this.handleChange}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      No more than 5 years from the start date.\n                    </Form.Text>\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Form.Group controlId=\"enddate\">\n                <Form.Label>Generate Schedule</Form.Label>\n                <div key='inline-radio' className=\"mb-3\">\n                  <Form.Check \n                    inline \n                    label='Daily' \n                    name='display' \n                    value='daily'\n                    type='radio' \n                    onChange={this.handleChange}\n                    id='gen-daily' />\n                  <Form.Check \n                    inline \n                    label=\"Weekly / Fortnightly / Monthly\" \n                    name='display'\n                    value='monthly'\n                    type='radio' \n                    onChange={this.handleChange}\n                    id='gen-monthly' />\n                </div>\n              </Form.Group>\n            </Form>\n            {this.displayRepaymentDates()}\n            <p>Assumptions:</p>\n            <ul>\n              <li>Interest accrued daily.</li>\n              <li>Daily interest is calculated after adding repayment or interest compounding adjustment.</li>\n            </ul>\n          </Col>\n          { this.state.schedule && this.state.schedule.length !== 0 &&\n            <Col>\n              {/* <h2>Schedule</h2> */}\n              <Card>\n                <Card.Body>\n                <h5>Summary</h5>\n                <Row>\n                  <Col>Start date:</Col>\n                  <Col>{this.state.date}</Col>\n                </Row>\n                <Row>\n                  <Col>End date:</Col>\n                  <Col>{this.state.enddate}</Col>\n                </Row>\n                <Row>\n                  <Col>Start balance:</Col>\n                  <Col>${this.state.amount}</Col>\n                </Row>\n                <Row>\n                  <Col>End balance:</Col>\n                  <Col>${this.state.schedule[this.state.schedule.length -1].balance}</Col>\n                </Row>\n                <Row>\n                  <Col>Total interest:</Col>\n                  <Col>${this.state.summary.interest}</Col>\n                </Row>\n                <Row>\n                  <Col>Total repayments:</Col>\n                  <Col>${this.state.summary.repayment}</Col>\n                </Row>\n                </Card.Body>\n              </Card>\n              {this.state.display === 'daily' && this.renderDailySchedule()}\n              {this.state.display === 'monthly' && this.renderMonthlySchedule()}\n            </Col>\n          }\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}